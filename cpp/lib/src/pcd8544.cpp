#include "pcd8544.h"

uint8_t pcd8544::buffer [page][width] = {0};

const char pcd8544::null_val = 0;

char pcd8544::NewFontLAT[] = {
0x00,0x00,0x00,0x00,0x00,0x00, //32/ -->
0x00,0x2F,0x00,0x00,0x00,0x00, //33/ --> !
0x00,0x03,0x00,0x03,0x00,0x00, //34/ --> "
0x14,0x3E,0x14,0x3E,0x14,0x00, //35/ --> #
0x12,0x25,0x7F,0x29,0x12,0x00, //36/ --> $
0x13,0x09,0x04,0x32,0x11,0x00, //37/ --> %
0x1A,0x25,0x35,0x7A,0x00,0x00, //38/ --> &
0x00,0x03,0x00,0x00,0x00,0x00, //39/ --> '
0x00,0x00,0x00,0x1E,0x21,0x00, //40/ --> (
0x21,0x1E,0x00,0x00,0x00,0x00, //41/ --> )
0x14,0x08,0x14,0x00,0x00,0x00, //42/ --> *
0x08,0x08,0x3E,0x08,0x08,0x00, //43/ --> +
0x40,0x30,0x00,0x00,0x00,0x00, //44/ --> ,
0x08,0x08,0x08,0x08,0x00,0x00, //45/ --> -
0x00,0x20,0x00,0x00,0x00,0x00, //46/ --> .
0x20,0x18,0x04,0x03,0x00,0x00, //47/ --> /
0x1E,0x25,0x25,0x29,0x1E,0x00, //48/ --> 0
0x20,0x22,0x3F,0x20,0x20,0x00, //49/ --> 1
0x32,0x29,0x29,0x29,0x26,0x00, //50/ --> 2
0x12,0x21,0x21,0x25,0x1A,0x00, //51/ --> 3
0x18,0x14,0x12,0x3F,0x10,0x00, //52/ --> 4
0x27,0x25,0x25,0x25,0x19,0x00, //53/ --> 5
0x1E,0x25,0x25,0x25,0x18,0x00, //54/ --> 6
0x01,0x01,0x39,0x05,0x03,0x00, //55/ --> 7
0x1A,0x25,0x25,0x25,0x1A,0x00, //56/ --> 8
0x06,0x29,0x29,0x29,0x1E,0x00, //57/ --> 9
0x00,0x12,0x00,0x00,0x00,0x00, //58/ --> :
0xC0,0xB2,0x80,0x80,0x80,0x00, //59/ --> ;
0x00,0x08,0x14,0x22,0x00,0x00, //60/ --> <
0x14,0x14,0x14,0x14,0x00,0x00, //61/ --> =
0x00,0x22,0x14,0x08,0x00,0x00, //62/ --> >
0x02,0x01,0x29,0x06,0x00,0x00, //63/ --> ?
0x00,0x00,0x00,0x00,0x00,0x00, //64/ --> @
0x3C,0x0A,0x09,0x0A,0x3C,0x00, //65/ --> A
0x3F,0x25,0x25,0x25,0x1A,0x00, //66/ --> B
0x1E,0x21,0x21,0x21,0x12,0x00, //67/ --> C
0x3F,0x21,0x21,0x12,0x0C,0x00, //68/ --> D
0x3F,0x25,0x25,0x25,0x21,0x00, //69/ --> E
0x3F,0x05,0x05,0x05,0x01,0x00, //70/ --> F
0x1E,0x21,0x29,0x29,0x1A,0x00, //71/ --> G
0x3F,0x04,0x04,0x04,0x3F,0x00, //72/ --> H
0x00,0x21,0x3F,0x21,0x00,0x00, //73/ --> I
0x10,0x20,0x21,0x1F,0x01,0x00, //74/ --> J
0x3F,0x04,0x0A,0x11,0x20,0x00, //75/ --> K
0x3F,0x20,0x20,0x20,0x20,0x00, //76/ --> L
0x3F,0x02,0x0C,0x02,0x3F,0x00, //77/ --> M
0x3F,0x02,0x04,0x08,0x3F,0x00, //78/ --> N
0x1E,0x21,0x21,0x21,0x1E,0x00, //79/ --> O
0x3F,0x09,0x09,0x09,0x06,0x00, //80/ --> P
0x1E,0x21,0x29,0x31,0x3E,0x40, //81/ --> Q
0x3F,0x09,0x09,0x19,0x26,0x00, //82/ --> R
0x12,0x25,0x25,0x29,0x12,0x00, //83/ --> S
0x01,0x01,0x3F,0x01,0x01,0x00, //84/ --> T
0x1F,0x20,0x20,0x20,0x1F,0x00, //85/ --> U
0x03,0x1C,0x20,0x1C,0x03,0x00, //86/ --> V
0x1F,0x20,0x18,0x20,0x1F,0x00, //87/ --> W
0x31,0x0A,0x04,0x0A,0x31,0x00, //88/ --> X
0x03,0x04,0x38,0x04,0x03,0x00, //89/ --> Y
0x31,0x29,0x25,0x23,0x21,0x00, //90/ --> Z
0x00,0x00,0x00,0x3F,0x21,0x00, //91/ --> [
0x03,0x04,0x18,0x20,0x00,0x00, //92/ --> обратный слэш
0x21,0x3F,0x00,0x00,0x00,0x00, //93/ --> ]
0x04,0x02,0x01,0x02,0x04,0x00, //94/ --> ^
0x20,0x20,0x20,0x20,0x20,0x00, //95/ --> _
0x00,0x01,0x02,0x00,0x00,0x00  //96/ --> `

};
char pcd8544::Big_number[10][42] = {

0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0xef, 0xc7, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 0
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x00,   // 1
0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0xe0, 0xd0, 0xb8, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3b, 0x17, 0x0f, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00,   // 2
0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 3
0x00, 0xfc, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc, 0x00, 0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x00,   // 4
0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xb8, 0xd0, 0xe0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 5
0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0xef, 0xd7, 0xbb, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xb8, 0xd0, 0xe0, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 6
0x00, 0x00, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x00,   // 7
0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0xef, 0xd7, 0xbb, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x7f, 0xbf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 8
0x00, 0xfc, 0xfa, 0xf6, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0xf6, 0xfa, 0xfc, 0x00, 0x00, 0x0f, 0x17, 0x3b, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xbb, 0xd7, 0xef, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xdf, 0xbf, 0x7f, 0x00,   // 9
// /
};


pcd8544::pcd8544()
:spi1 (spi::B, spi::div8), pin (Gpio::B), mem2spi1(dma::ch3, dma::mem2periph, dma::SPI1_TX), mem2buff (dma::ch5)
{
	//Settings pins
	pin.setOutPin (RST);
	pin.setOutPin (DC);
	
	//settings dma
	mem2spi1.set_periph ((uint32_t)&SPI1->DR);
	mem2spi1.set_inc_per (false);
	NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
	
	init ();
}

void pcd8544::init ()
{
	pin.setPin (RST);
	pin.clearPin (RST);
	pin.setPin (RST);
	send_comm(lcd_setfunctionext);    
  send_comm(lcd_setvop + 70); 
  send_comm(lcd_tempcoef + temp3);
  send_comm(lcd_setbias + bias_1_65);
  send_comm(lcd_setfunction);
  send_comm(lcd_displaynormal);
	clear_screen ();
}

void pcd8544::send_byte (uint8_t dta)
{
	pin.setPin (DC);
	spi1.Clear_CS ();
	spi1.put_data (dta);
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}

void pcd8544::send_data (uint8_t *dta)
{
}

void pcd8544::bin_number (uint8_t x , uint8_t y , uint8_t num)
{
	gotoxy (x,y);
	for (uint8_t i=0;i<8;++i)
	{
		if (num&(1<<(7-i))) draw_char ('1');
		else 	 draw_char ('0');
	}
}

void pcd8544::draw_font(char * font, char ch)
{
	pin.setPin (DC);
	spi1.Clear_CS ();
	font = font +((ch-32)*6);
	//font++;
	for (uint8_t i=0;i<6;++i,++font)
	{
		while (!spi1.flag_txe());
		spi1.put_data (*font);
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}

void pcd8544::draw_big_number(uint8_t x, uint8_t y, uint8_t ch)
{
	
	
	char *ptr = &Big_number [ch][0];
	for (uint8_t i=0;i<3;++i)
	{
		gotoxy (x,y+i);
		pin.setPin (DC);
		spi1.Clear_CS ();
		for (uint8_t j=0;j<14;++j, ptr++)
		{
			while (!spi1.flag_txe());
			spi1.put_data (*ptr);
		}
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}

void pcd8544::draw_char(uint8_t x , uint8_t y , char ch)
{
	gotoxy (x,y);
	draw_font (NewFontLAT, ch);
}

void pcd8544::draw_char(char ch)
{
	draw_font (NewFontLAT, ch);
}

void draw_font_buffer(uint8_t * font, char ch)
{
	/*font = font + ((ch-32)*6);
	for (uint8_t i=0;i<6;++i,++font)
	{
		*font);
	}*/
}

void pcd8544::draw_char_buffer (uint8_t x , uint8_t y , char ch)
{
	char *ptr = &NewFontLAT [((ch-32)*6)];
	for (uint8_t i=0;i<6;++i,ptr++)
	{
		buffer [y][x+i]= *ptr;
	}
}

void pcd8544::string_buffer (uint8_t x , uint8_t y , char *str)
{
	uint16_t shift=0;
	while (*str)
	{
		draw_char_buffer (x+shift,y, *str);
		str++;
		shift+=6;
	}
	
}

void pcd8544::hor_line_buffer (uint8_t x1 , uint8_t x2,  uint8_t y1 , uint8_t t)
{
	uint8_t l = x2 - x1;
	uint8_t *ptr= &buffer [y1>>3][x1];
	uint8_t thick = 0;
	for (uint8_t i=0;i<t;++i)
	{
		thick |= 1 << i;
	}
	thick <<= y1%8;
	for (uint8_t i=0;i<l;++i,ptr++)
	{
		*ptr= thick;
	}
}

void pcd8544::hor_line (uint8_t x1 , uint8_t x2,  uint8_t y , uint8_t t)
{
	uint8_t l = x2 - x1;
	uint8_t dy = y%8;
	uint8_t thick = 1 << dy;
	gotoxy (x1,(y>>3));
		
	for (uint8_t i=0;i<t;++i)
	{
		thick |= 1 << (i+dy);
	}
	pin.setPin (DC);
	spi1.Clear_CS ();
	for (uint8_t i=0;i<l;++i)
	{
		while (!spi1.flag_txe());
		spi1.put_data (thick);
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}
void pcd8544::string_screen (uint8_t x , uint8_t y , char *str)
{
	gotoxy (x,y);
	while (*str)
	{
		draw_char (*str);
		str++;
	}
	
}

void pcd8544::send_comm (uint8_t comm)
{
	pin.clearPin (DC);
	spi1.Clear_CS ();
	spi1.put_data (comm);
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}

void pcd8544::gotoxy(uint8_t x, uint8_t y)
{
	if (x > 83|y > 5) return;
  send_comm(lcd_setXaddr | x);
  send_comm(lcd_setYaddr | y);
}


void pcd8544::clear_screen ()
{
	int i;

  for (i=0 ;i<page*width ;++i ) 
	{
		while (!spi1.flag_txe());
		spi1.put_data (0);	
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
	/*
	gotoxy(0,0);
	pin.setPin (DC);
	spi1.Clear_CS ();
	cmar = &null_val;
	cmar non_inc;
	cpar = spi;
	cpar non_inc;
	cnt = width*page;
	dma_en;
	
	*/
}

void  pcd8544::clear_screen (uint8_t x,uint8_t y,uint8_t dx,uint8_t dy)
{
	
}

void pcd8544::fill_screen ()
{
	int i;
  gotoxy(0,0);
	pin.setPin (DC);
	spi1.Clear_CS ();
  for (i=0 ;i<page*width ;++i ) 
	{
		while (!spi1.flag_txe());
		spi1.put_data (0xFF);	
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}

void pcd8544::refresh_buffer ()
{
	
}

void pcd8544::draw_picture (const char * pic, uint16_t l)
{/*
	gotoxy(0,0);
	pin.setPin (DC);
	spi1.Clear_CS ();
  for (int i=0 ;i<l ;++i, ++pic ) 
	{
		while (!spi1.flag_txe());
		spi1.put_data (*pic);	
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();*/
	gotoxy(0,0);
	mem2spi1.set_mem ((uint32_t)pic);
	mem2spi1.set_inc_mem (true);
	mem2spi1.set_length (l);
	assert_chip ();
	mem2spi1.start();	
}



void pcd8544::pixel (uint8_t x , uint8_t y)
{
	char i;
  i = y%8;
  gotoxy ( x, y>>3);
  send_byte(1<<i);
}

void pcd8544::assert_chip ()
{
	pin.setPin (DC);
	spi1.Clear_CS ();
}

uint32_t * pcd8544::buffer_adress ()
{
	return (uint32_t *) buffer;
}

void pcd8544::clear_buffer ()
{
	/*
	mem2buff.set_mem ((uint32_t)&null_val);
	mem2buff.set_inc_mem (false);
	mem2buff.set_destination ((uint32_t)buffer);
	mem2buff.set_inc_per (true);
	mem2buff.set_length (width*page);
	mem2buff.start ();*/
	gotoxy(0,0);
	pin.setPin (DC);
	spi1.Clear_CS ();
  for (int i=0 ;i<page*width ;++i ) 
	{
		while (!spi1.flag_txe());
		spi1.put_data (0);	
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
}

void pcd8544::draw_buffer ()
{
	uint8_t * ptr = &buffer[0][0];
  gotoxy(0,0);
	pin.setPin (DC);
	spi1.Clear_CS ();
  for (int i=0 ;i<page*width ;++i,ptr++ ) 
	{
		while (!spi1.flag_txe());
		spi1.put_data (*ptr);	
	}
	while (spi1.flag_bsy ());
	spi1.Set_CS ();
/*	mem2spi1.set_mem ((uint32_t)buffer);
	mem2spi1.set_inc_mem (true);
	mem2spi1.set_length (width*page);
	assert_chip ();
	mem2spi1.start();	*/
}

void pcd8544::point_buffer (uint8_t x, uint8_t y, uint8_t t)
{
	uint8_t *ptr = &buffer [y][x];
	uint8_t thick = 0;
	for (uint8_t i=0;i<t;++i)
	{
		thick |= 1 <<(7-i);
	}
	for (uint8_t i=0;i<t;++i,ptr++)
	{
		*ptr= thick;
	}
}

void pcd8544::big_number_buffer (uint8_t x , uint8_t y , uint8_t num)
{
	char *ptr = &Big_number [num][0];
	for (uint8_t i=0;i<3;++i)
	{
		for (uint8_t j=0;j<14;++j,ptr++)
		{
			buffer [y+i][x+j] = *ptr;
		}
		
	}

}
void pcd8544::string_number_buffer (uint8_t x , uint8_t y , uint8_t *arr, uint8_t l)
{
	for (uint8_t i=0,shift=0;i<l;++i, shift +=16)
	{
		big_number_buffer (x+shift,y, *(arr+i));
	}
}

void pcd8544::clear_buffer (uint8_t x,uint8_t y,uint8_t dx,uint8_t dy)
{
	/*
	mem2mem
	cmar = &null_val;
	cmar non_inc;
	cpar inc;
	uint8_t *ptr = &buffer[y>>3][x];
	for (ui i=0;i < dy;++i)
	{
		ptr = &buffer[y>>3+i][x];
		cpar = ptr;
		cnt = dx;
	}
	*/
	
}

