#include "stm32f0xx.h"
#include "Gpio.h"
#include "delay.h"
#include "tact.h"
#include "Spi.h"
#include "nrf24l01.h"
#include "pcd8544.h"
#include "systimer.h"
#include "dma.h"


typedef unsigned int* reg;

extern "C"
{
	void DMA1_Channel2_3_IRQHandler(void);
	void DMA1_Channel4_5_IRQHandler(void);
	void SysTick_Handler (void);
}

tact frq;
pcd8544 lcd;
Gpio Adc (Gpio::A);

const uint16_t length = 504;
const uint8_t adc_pin = 0;

const char pic [length] = {0x98, 0x98, 0x98, 0x88, 0x9C, 0x94, 0x84, 0x06, 0x06, 0x06, 0x02, 0x02, 0x07, 0x05, 0x05, 0x09, 0x49, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x43, 0x49, 0x48, 0x49, 0xC0, 0xC0, 0x80, 0x80, 0x18, 0x08, 0x88, 0xC0, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xC0, 0xC0, 0x60, 0x60, 0xA0, 0x60, 0x60, 0x80, 0x80, 0x20, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xBC, 0xB4, 0xAC, 0x94, 0xC0, 0xCC, 0xE4, 0xE4, 0xE4, 0xE8, 0xE2, 0xF7, 0xF3, 0x62, 0x60, 0x60, 0x6C, 0xFC, 0xFF, 0xB7, 0x9D, 0x9D, 0xCD, 0xCD, 0x4B, 0x4B, 0x22, 0x36, 0x16, 0x53, 0x4B, 0x5B, 0x5B, 0x53, 0x41, 0xC1, 0xE1, 0xC4, 0xA3, 0xA3, 0xEB, 0xE7, 0xF6, 0xFA, 0x69, 0xFC, 0x7C, 0xB4, 0xBC, 0xBC, 0xBE, 0x3E, 0x37, 0xBE, 0x32, 0x32, 0x12, 0x1A, 0x53, 0x59, 0x48, 0x89, 0x98, 0x80, 0xE0, 0xE0, 0x68, 0x20, 0xF0, 0x80, 0xC0, 0x40, 0x40, 0x60, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x30, 0x10, 0x10, 0x10,
	0x7A, 0xFF, 0x7F, 0x7F, 0x77, 0xF7, 0x25, 0x3D, 0x2D, 0x1C, 0x94, 0x9C, 0x1A, 0x1A, 0x12, 0x1A, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x8F, 0xCC, 0xAE, 0x3E, 0xCF, 0xA6, 0x3E, 0x5E, 0x36, 0x4D, 0x4B, 0x1B, 0xB7, 0xA7, 0x37, 0x13, 0x93, 0x03, 0x01, 0x11, 0x99, 0xD9, 0xE1, 0xE9, 0x6D, 0x25, 0x21, 0x11, 0x11, 0x80, 0xC0, 0x41, 0x40, 0x40, 0x46, 0x46, 0x80, 0xC8, 0xC8, 0x98, 0xD0, 0x90, 0xD8, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x38, 0x00, 0x40, 0x42, 0x02, 0x0A, 0x0C, 0x0E, 0xBA, 0x58, 0xDB, 0xD9, 0x9B, 0x1D, 0x1D, 0x1C, 0x1E, 0x1E, 0x2E, 0x6E, 0x6F, 0xED, 0xEF, 0x6E, 0x6E, 0x3F, 0x1D, 0x1D, 0x52, 0x5B, 0x4B, 0xAB, 0xEF, 0x6B, 0x6F, 0x97, 0x17, 0x07, 0x02, 0xC3, 0x42, 0x6E, 0x6E, 0x7F, 0x5D, 0xF5, 0xAD, 0x8D, 0x0F, 0x8E, 0x0E, 0x02, 0x02, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x60, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xC0, 0x40, 0x01, 0x00, 0x80, 0x80, 0x80, 0x81, 0x81, 0x80, 0x40, 0x49, 0x09, 0x81, 0xD9, 0x59, 0x03, 0x0B, 0x09, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x13, 0x13, 0x03, 0x8A, 0x4A, 0x46, 0x44, 0x05, 0x41, 0x41, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x82, 0xB3, 0xB1, 0x91, 0x81, 0x81, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x40, 0xE0, 0x60, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x01, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x03, 0x05, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	
const char pic3 []={
0x01,0x03,0x07,0x0F,0x1F,0x3F,0x4F,0x63,
0x6D,0x61,0x4F,0x7F,0x4B,0x55,0x55,0x43,
0x5F,0x7F,0x41,0x55,0x55,0x4B,0x7F,0x5F,
0x43,0x7D,0x21,0x1F,0x0F,0x07,0x03,0x01,
0xFF,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,
0x7F,0x79,0x57,0x57,0x61,0x7F,0x41,0x75,
0x75,0x73,0x7F,0x63,0x5D,0x5D,0x63,0x7F,
0x41,0x55,0x55,0x4B,0x7F,0x41,0x55,0x55,
0x55,0x7F,0x41,0x77,0x77,0x41,0x7F,0x41,
0x57,0x57,0x6F,0x7F,0x7F,0x7F,0x3F,0x1F,
0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};



void init_adc ();

//uint8_t 
const char * arr [2] = {pic, pic3};

	
void DMA1_Channel2_3_IRQHandler(void)
{
	DMA1->IFCR |= DMA_IFCR_CTCIF3|DMA_IFCR_CGIF3|DMA_IFCR_CHTIF3;
	DMA1_Channel3->CCR &= ~ DMA_CCR_EN;	
	while (lcd.spi_bsy());
	lcd.desassert_chip ();
}

void DMA1_Channel4_5_IRQHandler(void)
{
	DMA1->IFCR |= DMA_IFCR_CTCIF5|DMA_IFCR_CGIF5|DMA_IFCR_CHTIF5;
	DMA1_Channel5->CCR &= ~ DMA_CCR_EN;
}

void SysTick_Handler (void)
{
	
}


int main()
{
	lcd.clear_buffer ();
	
	
	while (1)
	{

		for (uint8_t i=0;i<2;++i)
		{
			lcd.draw_picture (arr[i], length);
			delay_ms (1000);
			lcd.draw_buffer ();
			delay_ms (1000);
		}
	
	}
}

void init_adc ()
{
	//Settings gpio
	Adc.setOutPin (adc_pin, Gpio::Analog);
	
	
		//===Adc clock seection===//
	/* (1) Enable the peripheral clock of the ADC */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
	
	/* (2) Start HSI14 RC oscillator */
	RCC->CR2 |= RCC_CR2_HSI14ON; 
	
	/* (3) Wait HSI14 is ready */
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
	{
	/* For robust implementation, add here time-out management */
	}
	
	//===Adc enable===//
	/* (1) Enable the ADC */
	ADC1->CR |= ADC_CR_ADEN;
	
	/* (2) Wait until ADC ready */
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0)
	{
	/* For robust implementation, add here time-out management */
	}
	
	//=== Adc calibration===//
	/* (1) Ensure that ADEN = 0 */
	if ((ADC1->CR & ADC_CR_ADEN) != 0) 
	{
		/* (2) Clear ADEN */
		ADC1->CR &= (uint32_t)(~ADC_CR_ADEN); 
	}
	
	/* (3) Launch the calibration by setting ADCAL */
	ADC1->CR |= ADC_CR_ADCAL;
	
	/* (4) Wait until ADCAL=0 */
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) 
	{
	/* For robust implementation, add here time-out management */
	}
	
	/* (2) Select CHSEL0, CHSEL9, CHSEL10 andCHSEL17 for VRefInt */
	ADC1->CHSELR = ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL9
	| ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL17;
	
	/* (3) Select a sampling mode of 111 i.e. 239.5 ADC clk to be greater
	than 17.1us */
	ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2; 
	
	/* (4) Wake-up the VREFINT (only for VBAT, Temp sensor and VRefInt) */
	ADC->CCR |= ADC_CCR_VREFEN;
	uint16_t Adc_result [4];
	while (1)
	{
		/* Performs the AD conversion */
		ADC1->CR |= ADC_CR_ADSTART; /* Start the ADC conversion */
		
		for (uint8_t i=0; i < 4; i++)
		{
			while ((ADC1->ISR & ADC_ISR_EOC) == 0) /* Wait end of conversion */
			{
				/* For robust implementation, add here time-out management */
			}
			Adc_result [i] = ADC1->DR; /* Store the ADC conversion result */
		}
		ADC1->CFGR1 ^= ADC_CFGR1_SCANDIR;
	}
}

